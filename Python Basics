-------------python IDLE---------------
Python IDLE is a python editor to write python programs
windows search > python IDLE> OPEN > USE
-------------VARIABLES-----------------

Variables are:
   ==> Storage locations that have a name
   ==> name-value pairs
==> To assign a value to a variable use equal '=' sign
==>Ex:- fruit = 'apple'
        fruit = "orange"
        You can change the value of a variable 
Variables Naming Convention
   ==> Case sensitive. (Case Matters!)
       Fruit and fruit are different variables
   ==> Must Start with a letter.
       Can contain numbers.
   ==> Underscores allowed in variable names.
   ==> Not allowed:
       +
       -
Valid Variables Names
   ==> first3letters = 'ABC'
   ==> first_three_letters = 'ABC'
   ==> firstThreeLetters = 'ABC'
   
 --------------STRINGS-------------------
 Strings represent text
 Surrounded by quotes
 fruit = 'apple'
 fruit = "apple"
 Strings can be encapsulated in double or single quotes as shown above
 When you start a string defination with double quotation mark, the next double quotation mark that python encounters is interpreted as end of the string
 The same is true for single quotation.
 --------Use Quotes within Strings----------
 sentence = 'She said, "That is great tasting apple!"'
 sentence = "That's a great tasting apple ! "
 What if you want to use both double and single quotes with in same string?
 double = "She said, \"That's a great tasting apple!\" "
 single = 'She said, "That\'s a great tasting apple!" '
 
 ----------STRINGS INDEXING----------------
 Each character in a string is assigned an index
 String: a p p l e
 Index:  0 1 2 3 4
 
 a = 'apple' [0]
 b = 'apple' [4] 
 fruit = 'apple'
 first_character = fruit[0]
 
 ------------FUNCTIONS----------------------
 
 A function is a section of reusable code that performs an action
 A function has a name and is called or executed, by that name
 Optionally, functions can accept arguments and return data.
 Python includes many built in functions, one of which is the print function
 ---The print() Function----
 fruit = 'apple'
 print(fruit)
 print('orange')
 output:
 apple
 orange
 ---The len() Function----
 fruit = 'apple'
 fruit_len = len(fruit)
 print(fruit_len)
 output:
 5
 ---------NESTING FUNCTIONS---------------
 fruit = 'apple'
 print(len(fruit))
 output:
 5
 ---------STRING METHODS------------------
 ==> Basic OOP <==
 Everything in python is an object
 Every object has a type
 'apple' is an object of type "str"
 'apple' is a string object.
 fruit = 'apple'
   ==> fruit is a string object
 Objects also have functions but they are not called as functions, they are called as methods 
 So, Methods are functions run against an object
 To call a method on an object  
   ==> object.method ()
 ---The lower() String Method---
 fruit = 'Apple'
 print(fruit.lower())
 print(fruit.upper())
 output:
 apple
 APPLE
 
------STRING CONCATENATION----------
string concatenation only combines the strings as they are.
Strings you see below are seperated by spaces because those spaces are included in the strings it self
print('I ' + 'Love ' + 'Python.')
print('I' + ' love' + ' Python.')
Output:
I Love Python.
I love Python.
If you do not include extra spaces it would look like this.
print('I' + 'Love' + 'Python.')
Output:
ILovePython.
Remember: the + sign do not do anything, it won't add any extra character it combines or add the strings together.
---------STRING CONCATENATION USING VARIABLES-----------
first = 'I'
second = 'Love'
third = 'Python'
sentence = first + ' ' + second ' ' + third + '.'
print(sentence)
output:
I Love Python.
--------REPEATING STRINGS-----------
* IS THE REPETITION OPERATION AND THE FORMAT IS SHOWN BELOW
print('-' * 10) ( here the number indicates the number of times you want to repeat)
output:
----------
happiness = 'happy ' * 3
print(happiness)
output:
happy happy happy

------The str() Function-----------
Unlike strings numbers are not quoted in quotation marks
To concatenate string with number first convert number to a string with built in str function.
str() Functions converts non-strings such as numbers into strings
In this example we create a variable name version and assign it to a number three, then we print I love python then we concatenate string representation of variable version
finally we concatenate that with the period so we end up I love python 3
version = 3
print('I love Python ' + str(version) + '.' )
output:
I love Python 3.
Here's what happens when number is not converted into string
>>> print('I love Python ' + version + '.' )
Traceback (most recent call last):
  File "<pyshell#2>", line 1, in <module>
    print('I love Python ' + version + '.' )
TypeError: can only concatenate str (not "int") to str

------FORMATTING STRINGS--------
Instead of concatenating the strings to produce the format you desire
you can call format method on a string.
Create place holders also known as fields by using curly braces in the string and pass the values for those fields to the format method.
By default first curly brace field is passed with the first value passed for the format
and the second curly brace field is passed with the second value passed for the format and so on.
print(' I {} Python.'.format('love'))
print(' {} {} {}'.format('I', 'love', 'Python.'))
output:
I love Python.
I love Python.
Notice that, when you pass multiple objects to a function or a method you seperate them using a comma like above example
You can explicitly specify which possession of parameter will be used for a format field by providing the number incide the braces
So 0 encapsulated in curly braces will be replaced by the first item passed to the format
1 encapsulated in curly braces will be replaced by the second item passed to the format
Ex:-
>>> print('I {0} {1}. {1} {0}s me.'.format('love', 'Python'))
I love Python. Python loves me.

--Formatting Strings using Variables--
first = 'I'
second = 'Love'
third = 'Python'
print('{} {} {}.'.format(first, second, third))
output:
I Love Python.



 
 
 
 
 
 
